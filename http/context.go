package http

//GENERATED BY EVO-NG
import (
	"github.com/getevo/evo-ng"
	"github.com/getevo/evo-ng/websocket"
	"github.com/gofiber/fiber/v2"
)

//Context struct represents the Context which hold the HTTP request and response. It has methods and variables for the request query string, parameters, body, HTTP headers, and so on which can also extends.
type Context struct {
	Base  *evo.Context
	fiber *fiber.Ctx
}

//New create new type of struct
func (c *Context) New() evo.ContextInterface {
	return &Context{}
}

//WebSocket Wrap context ws/wss WebSocket requests. callback accepts func(*http.Context,*websocket.Conn)
func (c *Context) WebSocket(
	request *evo.Context,
	callback interface{},
	ws *websocket.Conn,
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()
	return callback.(func(*Context) error)(c)
}

//WebSocket Matches http WebSocket requests. callback accepts func(*http.Context)
func WebSocket(
	url string,
	callback func(*Context, *websocket.Conn) error,
	params ...interface{},
) {
	evo.WebSocket(url, callback, params...)
}

//Get Wrap context http Get requests. callback accepts func(*http.Context)
func (c *Context) Get(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()
	return callback.(func(*Context) error)(c)
}

//Get Matches http Get requests. callback accepts func(*http.Context)
func Get(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Get(url, callback, params...)
}

//Get Matches http Get requests. callback accepts func(*http.Context)
func (r *Router) Get(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Get(r.Prefix+url, callback, params...)
}

//Post Wrap context http Post requests. callback accepts func(*http.Context)
func (c *Context) Post(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()
	return callback.(func(*Context) error)(c)
}

//Post Matches http Post requests. callback accepts func(*http.Context)
func Post(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Post(url, callback, params...)
}

//Post Matches http Post requests. callback accepts func(*http.Context)
func (r *Router) Post(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Post(r.Prefix+url, callback, params...)
}

//All Wrap context http All requests. callback accepts func(*http.Context)
func (c *Context) All(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()

	return callback.(func(*Context) error)(c)
}

//All Matches http All requests. callback accepts func(*http.Context)
func All(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.All(url, callback, params...)
}

//All Matches http All requests. callback accepts func(*http.Context)
func (r *Router) All(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.All(r.Prefix+url, callback, params...)
}

//Put Wrap context http Put requests. callback accepts func(*http.Context)
func (c *Context) Put(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()

	return callback.(func(*Context) error)(c)
}

//Put Matches http Put requests. callback accepts func(*http.Context)
func Put(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Put(url, callback, params...)
}

//Put Matches http Put requests. callback accepts func(*http.Context)
func (r *Router) Put(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Put(r.Prefix+url, callback, params...)
}

//Patch Wrap context http Patch requests. callback accepts func(*http.Context)
func (c *Context) Patch(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()

	return callback.(func(*Context) error)(c)
}

//Patch Matches http Patch requests. callback accepts func(*http.Context)
func Patch(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Patch(url, callback, params...)
}

//Patch Matches http Patch requests. callback accepts func(*http.Context)
func (r *Router) Patch(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Patch(r.Prefix+url, callback, params...)
}

//Options Wrap context http Options requests. callback accepts func(*http.Context)
func (c *Context) Options(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()

	return callback.(func(*Context) error)(c)
}

//Options Matches http Options requests. callback accepts func(*http.Context)
func Options(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Options(url, callback, params...)
}

//Options Matches http Options requests. callback accepts func(*http.Context)
func (r *Router) Options(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Options(r.Prefix+url, callback, params...)
}

//Connect Wrap context http Connect requests. callback accepts func(*http.Context)
func (c *Context) Connect(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()

	return callback.(func(*Context) error)(c)
}

//Connect Matches http Connect requests. callback accepts func(*http.Context)
func Connect(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Connect(url, callback, params...)
}

//Connect Matches http Connect requests. callback accepts func(*http.Context)
func (r *Router) Connect(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Connect(r.Prefix+url, callback, params...)
}

//Head Wrap context http Head requests. callback accepts func(*http.Context)
func (c *Context) Head(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()

	return callback.(func(*Context) error)(c)
}

//Head Matches http Head requests. callback accepts func(*http.Context)
func Head(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Head(url, callback, params...)
}

//Head Matches http Head requests. callback accepts func(*http.Context)
func (r *Router) Head(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Head(r.Prefix+url, callback, params...)
}

//Delete Wrap context http Delete requests. callback accepts func(*http.Context)
func (c *Context) Delete(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()

	return callback.(func(*Context) error)(c)
}

//Delete Matches http Delete requests. callback accepts func(*http.Context)
func Delete(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Delete(url, callback, params...)
}

//Delete Matches http Delete requests. callback accepts func(*http.Context)
func (r *Router) Delete(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Delete(r.Prefix+url, callback, params...)
}

//Use Wrap context http Use requests. callback accepts func(*http.Context)
func (c *Context) Use(
	request *evo.Context,
	callback interface{},
) (err error) {
	c.Base = request
	c.fiber = request.Fiber()

	return callback.(func(*Context) error)(c)
}

//Use Matches http Use requests. callback accepts func(*http.Context)
func Use(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Use(url, callback, params...)
}

//Use Matches http Use requests. callback accepts func(*http.Context)
func (r *Router) Use(
	url string,
	callback func(*Context) error,
	params ...interface{},
) {
	evo.Use(r.Prefix+url, callback, params...)
}

//Asset create url to asset dir.%!(EXTRA string=Asset)
func Asset(
	url string,
	localPath string,
	params ...evo.AssetConfig,
) {
	evo.Asset(url, localPath, params...)
}
